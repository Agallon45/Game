using System;
using System.Collections.Generic;
using System.Text;

namespace Game
{
    class Griffin : Enemy
    {
        public Griffin(string name)
        {


            string[,] griffinSchematic =
            {
                { " "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","_","_","_"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," " },
                {" "," "," "," ","_","_",".","-","-","/",")"," "," ",".","-","~","~"," "," "," ","~","~",">",">",">",">",">",">",">",">"," "," "," ",".","-","."," "},
                {" "," "," ","(",".","_","\\","~"," "," ","\\"," ","("," "," "," "," "," "," "," "," ","~","~",">",">",">",">",">",">",">",">",".","~",".","-","'"," "},
                {" "," "," "," "," ","-","~","}"," "," "," ","\\","_","~","-",","," "," "," "," ",")","~","~",">",">",">",">",">",">",">","'"," ","/"," "," "," "," "},
                {" "," "," "," "," "," "," ","{"," "," "," "," "," ","~","/"," "," "," "," ","/","~","~","~","~","~","~","."," ","_",".","-","~"," "," "," "," "," "},
                { " "," "," "," "," "," "," "," ","~",".","("," "," "," ","`","-","-","~","~","/"," "," "," "," "," "," ","/","~"," ","~","."," "," "," "," "," "," "},
                { " "," "," ",".","-","-","~","~","~","~","_","\\"," "," ","\\","-","-","~","("," "," "," ","-",".","-","~","~","-","."," "," ","\\"," "," "," "," "," "},
                { " "," "," ","`","`","`","-","'","~","~"," ","/"," "," ","/"," "," "," "," ","~","-","."," "," ","\\"," ",".","-","-","~"," ","/"," "," "," "," "," "},
                { " "," "," "," "," "," "," "," ","(","(","(","_",".","'"," "," "," "," ","(","(","(","_","_",".","'"," ","`","`","`","-","'"," "," "," "," "," "," "}

            };
            this.name = name;
            this.schematic = griffinSchematic;
            maxHealthPoints = 130;
            CurrentHealthPoints = maxHealthPoints;
            Strength = 25;
            Armor = 30;
            Agility = 20;
            expAward = 90;
            coinReward = 80;
            initiative = 4;
        }

        public Griffin(string name, double modifier)
        {


            string[,] griffinSchematic =
            {
                { " "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","_","_","_"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," " },
                {" "," "," "," ","_","_",".","-","-","/",")"," "," ",".","-","~","~"," "," "," ","~","~",">",">",">",">",">",">",">",">"," "," "," ",".","-","."," "},
                {" "," "," ","(",".","_","\\","~"," "," ","\\"," ","("," "," "," "," "," "," "," "," ","~","~",">",">",">",">",">",">",">",">",".","~",".","-","'"," "},
                {" "," "," "," "," ","-","~","}"," "," "," ","\\","_","~","-",","," "," "," "," ",")","~","~",">",">",">",">",">",">",">","'"," ","/"," "," "," "," "},
                {" "," "," "," "," "," "," ","{"," "," "," "," "," ","~","/"," "," "," "," ","/","~","~","~","~","~","~","."," ","_",".","-","~"," "," "," "," "," "},
                { " "," "," "," "," "," "," "," ","~",".","("," "," "," ","`","-","-","~","~","/"," "," "," "," "," "," ","/","~"," ","~","."," "," "," "," "," "," "},
                { " "," "," ",".","-","-","~","~","~","~","_","\\"," "," ","\\","-","-","~","("," "," "," ","-",".","-","~","~","-","."," "," ","\\"," "," "," "," "," "},
                { " "," "," ","`","`","`","-","'","~","~"," ","/"," "," ","/"," "," "," "," ","~","-","."," "," ","\\"," ",".","-","-","~"," ","/"," "," "," "," "," "},
                { " "," "," "," "," "," "," "," ","(","(","(","_",".","'"," "," "," "," ","(","(","(","_","_",".","'"," ","`","`","`","-","'"," "," "," "," "," "," "}

            };
            this.name = name;
            this.schematic = griffinSchematic;
            maxHealthPoints = 130 * modifier;
            CurrentHealthPoints = maxHealthPoints;
            Strength = 25 * modifier;
            Armor = 30 * modifier;
            Agility = 20 * modifier;
            expAward = 90 * modifier;
            coinReward = 80 * modifier;
            initiative = 4;
        }

        public override string SpecialAtk(Player player)
        {
            if (!buffed)
            {
                buffed = true;
                return $"{name} is preparing to swoop! Watch out!";
            }
            else
            {
                double dmg = (Strength * 3);
                dmg = Math.Round(dmg);
                player.CurrentHealthPoints -= dmg;
                buffed = false;
                return $"{name} swoops! {player.name} suffers {dmg} damage!";
            }
        }

        public override string RemoveBuffs()
        {
            if (debuffed)
            {
                if (roundNum == roundNumRemove)
                {
                    Strength += negStrength;
                    negStrength = 0;
                    Agility += negAgility;
                    negAgility = 0;
                    debuffed = false;
                    roundNumRemove = 0;
                    return $"{name} is no longer debuffed";
                }
            }
            if (isDotted)
            {
                if (roundNum == roundNumRemove)
                {
                    dot = 0;
                    isDotted = false;
                    return $"{name} is no longer suffering periodic damage.";
                }
                else
                {
                    CurrentHealthPoints -= dot;
                    return $"{name} suffers {dot} damage!";
                }
            }
            else
            {
                return "CAAW!";
            }
        }
    }
}
